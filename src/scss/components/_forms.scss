// ---------------------------------------------------------------
// Input fields 
// ---------------------------------------------------------------

.form-control {
  display: block;
  width: 100%;
  // height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  // padding: $padding-base-vertical $padding-base-horizontal;
  // font-size: $font-size-base;
  // line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius;
  // @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  box-shadow: none;
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  // @include form-control-focus;
  &:focus {
    border-color: rgba($component-active-bg, .5); 
    box-shadow: $input-btn-focus-box-shadow;
  }

  // Placeholder
  @include placeholder;

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}

.form-control {
  &[class*="input-lg"],
  &.form-control__large {
    height: 45px;
    font-size: $font-size-base;
    line-height: $line-height-base;
  }
  &.form-control__small {
    height: 35px;
  }
}

.form-group {
  label {
    font-size: 12px;
  }
  // Blend the input-group-addon with the input fields for a seamless experience
  .input-group {
    &.input-group__blend-addon {
      input[type="email"],
      input[type="password"],
      input[type="text"] {
        &.form-control {
          border-right: 0;
          border-radius: 2px;
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
          @include box-shadow(0,0,0);
          
          & + .input-group-addon {
            border-left: 0;
          }
          &:focus {
            & + .input-group-addon {
              outline: 0;
              border-color: $input-border-focus;
            }
          }
        }
      }
      .input-group-addon {
        background: #FFF;
        background-color: #FFF;
        border-radius: 0;
      }
    }
  }
}

.field_spacing {
	margin-top: 8px;
	margin-bottom: 8px;

  label {
    font-size: 80%;
    width: 160px;
  }
  select,
  input {
    color: #555;
    border: 1px solid #ddd;
    border-radius: 3px;
    height: 45px;
    width: 300px;
    padding: 6px 12px;
  }
}

// Feedback states
.has-success {
  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
  @include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  font-size: ($font-size-base / 1.2);
  font-style: italic;
  letter-spacing: 0.2px;
}